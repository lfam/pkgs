When using the GPGME crypto integration (crypt_use_gpgme=yes) for OpenPGP, allow
encrypting messages to self.

Patch adapted from upstream NeoMutt repository:

https://github.com/neomutt/neomutt/commit/9f2fb90758b9ac8a7e84858fd66369d4c414ea7c

The first hunk, a whitespace change, fails to apply due to syntactical
differences between Mutt and NeoMutt, so we disable it.

From 9f2fb90758b9ac8a7e84858fd66369d4c414ea7c Mon Sep 17 00:00:00 2001
From: Guillaume Brogi <gui-gui@netcourrier.com>
Date: Fri, 26 Aug 2016 11:59:07 +0200
Subject: [PATCH] Add PgpEncryptSelf option

---
 crypt.c | 18 +++++++++++++++---
 init.h  |  6 ++++++
 mutt.h  |  1 +
 3 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/crypt.c b/crypt.c
index 5aa8266b..5086c6ec 100644
--- a/crypt.c
+++ b/crypt.c
#@@ -243,7 +243,7 @@ int mutt_protect (HEADER *msg, char *keylist)
# 
#       tmp_pbody = crypt_smime_build_smime_entity (tmp_smime_pbody, new_keylist);
#       if (new_keylist != keylist)
#-        FREE(&new_keylist);
#+        FREE (&new_keylist);
# 
#       if (!tmp_pbody)
#       {
@@ -265,10 +265,22 @@ int mutt_protect (HEADER *msg, char *keylist)
     if ((WithCrypto & APPLICATION_PGP)
         && (msg->security & APPLICATION_PGP))
     {
-      if (!(pbody = crypt_pgp_encrypt_message (tmp_pgp_pbody, keylist,
-                                               flags & SIGN)))
+      char *new_keylist = keylist;
+
+      if (PgpSignAs && query_quadoption (OPT_PGPENCRYPTSELF, _("Encrypt message to PGP Default Key also?")) == MUTT_YES)
       {
+        /* +1 for SPACE, +1 for NULL */
+        int size = mutt_strlen (keylist) + mutt_strlen (PgpSignAs) + 2;
+        new_keylist = safe_malloc (size);
+        snprintf (new_keylist, size, "%s %s", keylist, PgpSignAs);
+      }
 
+      pbody = crypt_pgp_encrypt_message (tmp_pgp_pbody, new_keylist,
+                                               flags & SIGN);
+      if (new_keylist != keylist)
+	FREE(&new_keylist);
+      if (!pbody)
+      {
 	/* did we perform a retainable signature? */
 	if (flags != msg->security)
 	{
diff --git a/init.h b/init.h
index dff4dd04..6141dd98 100644
--- a/init.h
+++ b/init.h
@@ -583,6 +583,12 @@ struct option_t MuttVars[] = {
   ** to find out whether an encrypted message is also signed.
   ** (Crypto only)
   */
+  { "pgp_encrypt_self",		DT_QUAD,	 R_NONE, OPT_PGPENCRYPTSELF, MUTT_NO },
+  /*
+  ** .pp
+  ** Encrypt the message to $$pgp_sign_as too.
+  ** (PGP only)
+  */
   { "crypt_timestamp", DT_BOOL, R_NONE, OPTCRYPTTIMESTAMP, 1 },
   /*
   ** .pp
diff --git a/mutt.h b/mutt.h
index e7ecdffd..5814901e 100644
--- a/mutt.h
+++ b/mutt.h
@@ -301,6 +301,7 @@ enum
   OPT_MOVE,
   OPT_PGPMIMEAUTO,     /* ask to revert to PGP/MIME when inline fails */
   OPT_SMIMEENCRYPTSELF,
+  OPT_PGPENCRYPTSELF,
 #ifdef USE_POP
   OPT_POPDELETE,
   OPT_POPRECONNECT,
-- 
2.11.0

